#!/usr/bin/env python3

import requests
import urllib
import json
from bs4 import BeautifulSoup

import matplotlib.pyplot as plt
import matplotlib.patheffects as pe #provides stroke effect for lines
#from matplotlib.lines import Line2D #for legend

#scrape and return sunrise/sunset times for specified month/year
def query_site(month, year):
	url = "https://sunrise-sunset.org/search?location=new%20york&year="
	query = url + str(year) + "&month=" + str(month)

	request = urllib.request.Request(query)
	#we're scraping directly from a webpage, this makes them less likely to block us :)
	request.add_header("Authorization", "Bearer ")
	request.add_header("User-Agent", "")

	response = urllib.request.urlopen(request, timeout=3)
	string = response.read().decode('utf-8')

	suntimes_table = BeautifulSoup(string, features="html.parser").find(id="month").select('tr')
	return suntimes_table[2:] #first 2 elements do not contain data

"""
build and return a dictionary of sunrise/sunset times for specified year

the two *_minutes lists are the only necessary data, but I wanted to conserve
	the full data in an organized manner so to have it available
"""
def suntimes_for_year(year):
	#dictionary of 12 months, each month key corresponding to a list of tuples (# of days in the month)
	#each tuple contains the index of the day, and a dictionary of sunrise/sunset times (12hr, 24hr, minutes)
	year_suntimes = {1:[], 2:[], 3:[], 4:[], 5:[], 6:[], 7:[], 8:[], 9:[], 10:[], 11:[], 12:[]}
	#the *_minutes lists contain the data we will actually be plotting
	year_sunrise_minutes = []
	year_sunset_minutes = []
	#for each month, query the website for the month's data and fill existing structures with data
	for month in year_suntimes.keys():
		suntimes_table = query_site(month, year) #html data
		day_index = 1
		for day in suntimes_table:
			#here we finish the process of finding the sunrise/sunset data, and save it as a string
			sunrise_12hr = day.find("span", class_="sunrise").text
			sunset_12hr = day.find("span", class_="sunset").text

			#convert times to other formats, append to lists, housekeeping...

			sunrise_24hr = convert_to_24hr(sunrise_12hr)
			sunset_24hr = convert_to_24hr(sunset_12hr)

			sunrise_minutes = convert_to_minutes(sunrise_24hr)
			sunset_minutes = convert_to_minutes(sunset_24hr)
			year_sunrise_minutes.append(sunrise_minutes)
			year_sunset_minutes.append(sunset_minutes)

			year_suntimes[month].append((day_index, {"sunrise" : (sunrise_12hr, sunrise_24hr, sunrise_minutes), "sunset" : (sunset_12hr, sunset_24hr, sunset_minutes)}))

			day_index += 1

	return (year_suntimes, year_sunrise_minutes, year_sunset_minutes)

# sample input: '7:20:01 am', or '4:39:46 pm'
def convert_to_24hr(time_12hr):
	if "am" in time_12hr:
		#12AM special case, turn it into 00
		if time_12hr[0:2] == "12":
			return "00" + time_12hr[2:-3] #-3 removes suffix ('am' or 'pm')
		#AM times are already in proper format, just remove suffix
		else:
			if time_12hr[2] == ":":
				return time_12hr[:-3]
			else:
				return "0" + time_12hr[:-3]
	else: #pm
		hour = time_12hr[0:2]
		if hour == "12":
			return time_12hr[:-3]
		#data doesn't have zero padded hours for single digits, so treat double digits as special case
		elif hour == "10" or hour == "11":
			return str(int(hour) + 12) + time_12hr[2:-3]
		else:
			return str(int(time_12hr[0]) + 12) + time_12hr[1:-3]

# sample input 06:51:35
# input guaranteed to be shaped as 00:00:00
def convert_to_minutes(time_24hr):
	h, m, s = time_24hr.split(":")
	return (int(h) * 60) + (int(m)) + (float(s)/60)

#receives list of floats, subtracts 60 from float in range 69-307 (adjusting for daylight savings)
def remove_daylight_savings(suntimes_in_minutes):
	DAYLIGHT_SAVINGS_START = 69 #Day 69, March 10th
	DAYLIGHT_SAVINGS_END = 307 #Day 306, November 3rd

	for i in range(DAYLIGHT_SAVINGS_START - 1, DAYLIGHT_SAVINGS_END - 1): #-1 for zero indexing
		suntimes_in_minutes[i] -= 60 #subtract the extra hour


### MAIN


#CALL FUNCTIONS TO SCRAPE, CLEAN, ORGANIZE DATA
suntimes_2019_table, sunrises_minutes_2019, sunsets_minutes_2019 = suntimes_for_year(2019)
remove_daylight_savings(sunrises_minutes_2019)
remove_daylight_savings(sunsets_minutes_2019)


#ALREADY SCRAPED/CLEANED, HARDCODED DATA
#sunrises_minutes_2019 = [440.01666666666665, 440.06666666666666, 440.1, 440.1, 440.05, 439.96666666666664, 439.8333333333333, 439.68333333333334, 439.48333333333335, 439.23333333333335, 438.96666666666664, 438.65, 438.31666666666666, 437.93333333333334, 437.5, 437.05, 436.55, 436.03333333333336, 435.46666666666664, 434.8666666666667, 434.23333333333335, 433.56666666666666, 432.8666666666667, 432.15, 431.3833333333333, 430.5833333333333, 429.76666666666665, 428.9, 428.01666666666665, 427.1, 426.15, 425.18333333333334, 424.18333333333334, 423.15, 422.1, 421.01666666666665, 419.9, 418.76666666666665, 417.6166666666667, 416.43333333333334, 415.23333333333335, 414.0, 412.75, 411.48333333333335, 410.2, 408.8833333333333, 407.55, 406.2, 404.8333333333333, 403.45, 402.05, 400.6333333333333, 399.2, 397.75, 396.28333333333336, 394.8, 393.31666666666666, 391.8, 390.28333333333336, 388.75, 387.21666666666664, 385.6666666666667, 384.1, 382.53333333333336, 380.95, 379.35, 377.75, 376.15, 374.6, 372.98333333333335, 371.35, 369.71666666666664, 368.0833333333333, 366.45, 364.8, 363.15, 361.5, 359.85, 358.18333333333334, 356.53333333333336, 354.8666666666667, 353.21666666666664, 351.55, 349.9, 348.23333333333335, 346.5833333333333, 344.93333333333334, 343.28333333333336, 341.6333333333333, 339.98333333333335, 338.35, 336.71666666666664, 335.0833333333333, 333.46666666666664, 331.85, 330.23333333333335, 328.6333333333333, 327.03333333333336, 325.45, 323.8666666666667, 322.3, 320.73333333333335, 319.18333333333334, 317.65, 316.1166666666667, 314.6, 313.1, 311.6, 310.1333333333333, 308.6666666666667, 307.21666666666664, 305.78333333333336, 304.3666666666667, 302.96666666666664, 301.5833333333333, 300.21666666666664, 298.8666666666667, 297.53333333333336, 296.21666666666664, 294.9166666666667, 293.65, 292.4, 291.1666666666667, 289.95, 288.76666666666665, 287.6, 286.45, 285.3333333333333, 284.23333333333335, 283.1666666666667, 282.1166666666667, 281.1, 280.1, 279.1333333333333, 278.18333333333334, 277.26666666666665, 276.3833333333333, 275.53333333333336, 274.7, 273.9, 273.1333333333333, 272.3833333333333, 271.6666666666667, 271.0, 270.35, 269.71666666666664, 269.1333333333333, 268.5833333333333, 268.06666666666666, 267.56666666666666, 267.1166666666667, 266.68333333333334, 266.3, 265.93333333333334, 265.6, 265.31666666666666, 265.05, 264.81666666666666, 264.6333333333333, 264.46666666666664, 264.35, 264.25, 264.18333333333334, 264.15, 264.1666666666667, 264.2, 264.26666666666665, 264.3666666666667, 264.5, 264.6666666666667, 264.85, 265.0833333333333, 265.3333333333333, 265.6166666666667, 265.93333333333334, 266.26666666666665, 266.65, 267.05, 267.46666666666664, 267.9166666666667, 268.4, 268.9, 269.43333333333334, 269.98333333333335, 270.55, 271.15, 271.76666666666665, 272.4166666666667, 273.06666666666666, 273.75, 274.45, 275.1666666666667, 275.9, 276.6666666666667, 277.43333333333334, 278.21666666666664, 279.01666666666665, 279.8333333333333, 280.6666666666667, 281.5, 282.35, 283.21666666666664, 284.1, 284.98333333333335, 285.8833333333333, 286.78333333333336, 287.7, 288.6166666666667, 289.55, 290.48333333333335, 291.4166666666667, 292.3666666666667, 293.31666666666666, 294.28333333333336, 295.23333333333335, 296.2, 297.1666666666667, 298.15, 299.1166666666667, 300.1, 301.06666666666666, 302.05, 303.03333333333336, 304.01666666666665, 305.0, 305.98333333333335, 306.96666666666664, 307.95, 308.93333333333334, 309.9166666666667, 310.9, 311.8833333333333, 312.8666666666667, 313.85, 314.8333333333333, 315.81666666666666, 316.8, 317.78333333333336, 318.75, 319.73333333333335, 320.71666666666664, 321.68333333333334, 322.6666666666667, 323.6333333333333, 324.6166666666667, 325.5833333333333, 326.55, 327.53333333333336, 328.5, 329.46666666666664, 330.45, 331.4166666666667, 332.3833333333333, 333.3666666666667, 334.3333333333333, 335.3, 336.28333333333336, 337.25, 338.23333333333335, 339.21666666666664, 340.18333333333334, 341.1666666666667, 342.15, 343.1333333333333, 344.1166666666667, 345.1166666666667, 346.1, 347.1, 348.1, 349.1, 350.1, 351.1166666666667, 352.1166666666667, 353.1333333333333, 354.15, 355.18333333333334, 356.2, 357.23333333333335, 358.28333333333336, 359.31666666666666, 360.3666666666667, 361.4166666666667, 362.46666666666664, 363.53333333333336, 364.6, 365.6666666666667, 366.75, 367.8333333333333, 368.9166666666667, 370.01666666666665, 371.1166666666667, 372.21666666666664, 373.31666666666666, 374.43333333333334, 375.56666666666666, 376.68333333333334, 377.81666666666666, 378.95, 380.1, 381.23333333333335, 382.3833333333333, 383.53333333333336, 384.7, 385.8666666666667, 387.03333333333336, 388.2, 389.4166666666667, 390.5833333333333, 391.76666666666665, 392.93333333333334, 394.1166666666667, 395.3, 396.48333333333335, 397.6666666666667, 398.8333333333333, 400.01666666666665, 401.2, 402.3666666666667, 403.53333333333336, 404.7, 405.8666666666667, 407.01666666666665, 408.1666666666667, 409.31666666666666, 410.45, 411.5833333333333, 412.7, 413.81666666666666, 414.9166666666667, 416.0, 417.06666666666666, 418.1333333333333, 419.18333333333334, 420.21666666666664, 421.23333333333335, 422.23333333333335, 423.2, 424.1666666666667, 425.1166666666667, 426.03333333333336, 426.93333333333334, 427.8, 428.65, 429.48333333333335, 430.28333333333336, 431.06666666666666, 431.81666666666666, 432.53333333333336, 433.23333333333335, 433.8833333333333, 434.51666666666665, 435.1333333333333, 435.7, 436.23333333333335, 436.73333333333335, 437.21666666666664, 437.65, 438.05, 438.4166666666667, 438.75, 439.05, 439.31666666666666, 439.53333333333336, 439.71666666666664, 439.8666666666667]
#sunsets_minutes_2019 = [999.7666666666667, 1000.6333333333333, 1001.5166666666667, 1002.4333333333333, 1003.3666666666667, 1004.3166666666667, 1005.3, 1006.3, 1007.3166666666667, 1008.3666666666667, 1009.4166666666666, 1010.4833333333333, 1011.5833333333334, 1012.6833333333333, 1013.8, 1014.9333333333333, 1016.0666666666667, 1017.2333333333333, 1018.4, 1019.5666666666667, 1020.75, 1021.95, 1023.15, 1024.35, 1025.5666666666666, 1026.7833333333333, 1028.0, 1029.2166666666667, 1030.45, 1031.6833333333334, 1032.9166666666667, 1034.15, 1035.3833333333334, 1036.6166666666666, 1037.85, 1039.0833333333333, 1040.3166666666666, 1041.55, 1042.7666666666667, 1044.0, 1045.2166666666667, 1046.4333333333334, 1047.65, 1048.8666666666666, 1050.0833333333333, 1051.2833333333333, 1052.4833333333333, 1053.6833333333334, 1054.8666666666666, 1056.0666666666666, 1057.25, 1058.4166666666667, 1059.6, 1060.7666666666667, 1061.9333333333334, 1063.0833333333333, 1064.2333333333333, 1065.3833333333334, 1066.5333333333333, 1067.6666666666667, 1068.8, 1069.9333333333334, 1071.05, 1072.1666666666667, 1073.2833333333333, 1074.4, 1075.5, 1076.6, 1077.65, 1078.75, 1079.8333333333333, 1080.9166666666667, 1082.0, 1083.0833333333333, 1084.15, 1085.2333333333333, 1086.3, 1087.3666666666666, 1088.4333333333334, 1089.4833333333333, 1090.55, 1091.6, 1092.6666666666667, 1093.7166666666667, 1094.7666666666667, 1095.8166666666666, 1096.8666666666666, 1097.9166666666667, 1098.9666666666667, 1100.0166666666667, 1101.0666666666666, 1102.1166666666666, 1103.15, 1104.2, 1105.25, 1106.3, 1107.3333333333333, 1108.3833333333334, 1109.4333333333334, 1110.4666666666667, 1111.5166666666667, 1112.5666666666666, 1113.6166666666666, 1114.6666666666667, 1115.7166666666667, 1116.75, 1117.8, 1118.85, 1119.9, 1120.95, 1122.0, 1123.05, 1124.1, 1125.15, 1126.1833333333334, 1127.2333333333333, 1128.2833333333333, 1129.3333333333333, 1130.3666666666666, 1131.4166666666667, 1132.45, 1133.4833333333333, 1134.5166666666667, 1135.55, 1136.5833333333333, 1137.6, 1138.6166666666666, 1139.6333333333334, 1140.65, 1141.65, 1142.65, 1143.65, 1144.6333333333334, 1145.6, 1146.5833333333333, 1147.5333333333333, 1148.4833333333333, 1149.4333333333334, 1150.3666666666666, 1151.2833333333333, 1152.2, 1153.1, 1153.9833333333333, 1154.85, 1155.7, 1156.55, 1157.3666666666666, 1158.1833333333334, 1158.9666666666667, 1159.7333333333333, 1160.5, 1161.2333333333333, 1161.95, 1162.6333333333334, 1163.3166666666666, 1163.9666666666667, 1164.5833333333333, 1165.2, 1165.7666666666667, 1166.3333333333333, 1166.85, 1167.3666666666666, 1167.8333333333333, 1168.2833333333333, 1168.7, 1169.1, 1169.4666666666667, 1169.8, 1170.1, 1170.3666666666666, 1170.6166666666666, 1170.8166666666666, 1171.0, 1171.15, 1171.2666666666667, 1171.35, 1171.4, 1171.4166666666667, 1171.3833333333334, 1171.3333333333333, 1171.25, 1171.1333333333334, 1170.9833333333333, 1170.8, 1170.5833333333333, 1170.3166666666666, 1170.0333333333333, 1169.7166666666667, 1169.35, 1168.9666666666667, 1168.55, 1168.0833333333333, 1167.6, 1167.0833333333333, 1166.5166666666667, 1165.9333333333334, 1165.3166666666666, 1164.6666666666667, 1163.9833333333333, 1163.2666666666667, 1162.5166666666667, 1161.75, 1160.9333333333334, 1160.1, 1159.25, 1158.35, 1157.4333333333334, 1156.4833333333333, 1155.5, 1154.5, 1153.4666666666667, 1152.4166666666667, 1151.3333333333333, 1150.2333333333333, 1149.1, 1147.95, 1146.7666666666667, 1145.5666666666666, 1144.3333333333333, 1143.1, 1141.8333333333333, 1140.55, 1139.2333333333333, 1137.9, 1136.5666666666666, 1135.2, 1133.8166666666666, 1132.4166666666667, 1131.0, 1129.55, 1128.1, 1126.6333333333334, 1125.1666666666667, 1123.6666666666667, 1122.15, 1120.6333333333334, 1119.1, 1117.55, 1115.9833333333333, 1114.4166666666667, 1112.8333333333333, 1111.2333333333333, 1109.6333333333334, 1108.0333333333333, 1106.4, 1104.7833333333333, 1103.1333333333334, 1101.5, 1099.85, 1098.1833333333334, 1096.5333333333333, 1094.85, 1093.1833333333334, 1091.5166666666667, 1089.8333333333333, 1088.15, 1086.45, 1084.7666666666667, 1083.0833333333333, 1081.3833333333334, 1079.6833333333334, 1078.0, 1076.3, 1074.6166666666666, 1072.9166666666667, 1071.2333333333333, 1069.5333333333333, 1067.85, 1066.1666666666667, 1064.5, 1062.8166666666666, 1061.15, 1059.4833333333333, 1057.8333333333333, 1056.1833333333334, 1054.5333333333333, 1052.9, 1051.2666666666667, 1049.6333333333334, 1048.0333333333333, 1046.4166666666667, 1044.8333333333333, 1043.25, 1041.6666666666667, 1040.1, 1038.55, 1037.0166666666667, 1035.5, 1033.9833333333333, 1032.4833333333333, 1031.0166666666667, 1029.55, 1028.1, 1026.6666666666667, 1025.25, 1023.8499999999999, 1022.4666666666667, 1021.0999999999999, 1019.7666666666667, 1018.4333333333334, 1017.1333333333334, 1015.8499999999999, 1014.5999999999999, 1013.3666666666666, 1012.1500000000001, 1010.9666666666667, 1009.75, 1008.6166666666667, 1007.5, 1006.4166666666666, 1005.35, 1004.3166666666667, 1003.3166666666667, 1002.3333333333334, 1001.3833333333333, 1000.4666666666667, 999.5833333333334, 998.7166666666667, 997.9, 997.1, 996.35, 995.6166666666667, 994.9166666666666, 994.25, 993.6333333333333, 993.0333333333333, 992.4833333333333, 991.95, 991.4666666666667, 991.0166666666667, 990.6, 990.2333333333333, 989.9, 989.5833333333334, 989.3333333333334, 989.1, 988.9166666666666, 988.7666666666667, 988.65, 988.5833333333334, 988.55, 988.55, 988.6, 988.6833333333333, 988.8, 988.9666666666667, 989.1666666666666, 989.4, 989.6666666666666, 989.9666666666667, 990.3166666666667, 990.7, 991.1166666666667, 991.5666666666667, 992.0666666666667, 992.5833333333334, 993.15, 993.7333333333333, 994.35, 995.0166666666667, 995.7, 996.4166666666666, 997.15, 997.9333333333333, 998.7333333333333]


### SET DEFAULTS / ASSORTED PREREQUISITES
MAX_MINUTES_VALUE = 1499.98333 # 24:59:59, or 24 * 60 + 59 + 59/60
plt.ylim(0, MAX_MINUTES_VALUE)
x = range(1, 366) # x-axis, days of the year
plt.xticks(x) #one tick for each day
plt.tick_params(axis='x', which='both', bottom=False, top=False) #hide the ticks
plt.gca().tick_params(axis='y', which='major', labelsize=8.5) #change y axis tick label size

plt.suptitle("NEW YORK CITY")
plt.title("SUNRISE AND SUNSET TIMES IN 2019", {'fontname':'Arial Black'})

#plot horizontal lines across graph for each y tick
for i in range(0, 1440 + 1, 120):
	plt.plot(range(0, 365), [i for j in range(365)], color="black", alpha=0.3)


### PLOT LINES
ss = plt.plot(x, sunsets_minutes_2019, linewidth=3, 
	path_effects=[pe.Stroke(linewidth=6, foreground='black'), pe.Normal()])

sr = plt.plot(x, sunrises_minutes_2019, linewidth=3, 
	path_effects=[pe.Stroke(linewidth=6, foreground='black'), pe.Normal()])

#Legend
# custom_lines = [Line2D([0], [0], color=sr[0].get_color(), lw=4),
#                 Line2D([0], [0], color=ss[0].get_color(), lw=4)]
# plt.gca().legend(custom_lines, ['SUNRISES', 'SUNSETS'], loc="upper right")


### PLOT SIGNIFICANT DATA POINTS (min/max)
min_sunrise = min(sunrises_minutes_2019)
min_sunrise_index = sunrises_minutes_2019.index(min_sunrise)
min_sunset = min(sunsets_minutes_2019)
min_sunset_index = sunsets_minutes_2019.index(min_sunset)

plt.plot(min_sunrise_index, min_sunrise, marker='o', markersize=4, color="white",
	path_effects=[pe.Stroke(linewidth=5, foreground='black'), pe.Normal()])

plt.plot(min_sunset_index, min_sunset, marker='o', markersize=4, color="white",
	path_effects=[pe.Stroke(linewidth=5, foreground='black'), pe.Normal()])

max_sunrise = max(sunrises_minutes_2019)
max_sunrise_index = sunrises_minutes_2019.index(max_sunrise)
max_sunset = max(sunsets_minutes_2019)
max_sunset_index = sunsets_minutes_2019.index(max_sunset)

plt.plot(max_sunrise_index, max_sunrise, marker='o', markersize=5, color="black",
	path_effects=[pe.Stroke(linewidth=3, foreground='white'), pe.Normal()])

plt.plot(max_sunset_index, max_sunset, marker='o', markersize=5, color="black",
	path_effects=[pe.Stroke(linewidth=3, foreground='white'), pe.Normal()])


### ADD MONTH LABELS ON X-AXIS
months_first_days = {1:"Jan", 32:"Feb", 60:"Mar", 91:"Apr", 121:"May", 152:"Jun",
	182: "Jul", 213:"Aug", 244:"Sep", 274:"Oct", 305:"Nov", 335:"Dec"}

xlabels = [item.get_text() for item in plt.gca().get_xticklabels()]

#add month label at every start of month on x axis
for day, month in months_first_days.items():
	left_adjustment = 13
	xlabels[day + left_adjustment] = month
	#vertical bars denoting range of each month
	plt.bar(day + left_adjustment, MAX_MINUTES_VALUE, width = 31, alpha=0.3)

plt.gca().set_xticklabels(xlabels)


### CHANGE MINUTES TO HOUR FORMAT ON Y-AXIS
yaxis_ticks = list(range(0, 1440 + 1, 120)) #every 2 hours (in minutes)
ylabels = ["12:00 AM", "2:00 AM", "4:00 AM", "6:00 AM", "8:00 AM", "10:00 AM", "12:00 PM",
	"2:00 PM", "4:00 PM", "6:00 PM", "8:00 PM", "10:00 PM", "12:00 AM"]
plt.yticks(yaxis_ticks, ylabels) #the labels are shown instead of the tick values


### DISPLAY/SAVE
#plt.show()
plt.savefig('sungraph.png')
